// Generated by CoffeeScript 1.8.0
(function() {
  var all, any, grammar, many, optional, regexp, rule, word, ws, _ref;

  _ref = require("bartlett"), regexp = _ref.regexp, word = _ref.word, ws = _ref.ws, any = _ref.any, all = _ref.all, many = _ref.many, optional = _ref.optional, rule = _ref.rule, grammar = _ref.grammar;

  module.exports = (function() {
    var array, atom, bol, collapse, delimiter, eol, forward, indented, inline, name, nested, object, pair, spaces, start, tabs, value;
    tabs = 0;
    indented = function(p) {
      return function(s) {
        var match;
        tabs++;
        match = p(s);
        tabs--;
        return match;
      };
    };
    spaces = regexp(/^([ ]*)/);
    bol = function(s) {
      var match, rest, value;
      match = spaces(s);
      if (match != null) {
        value = match.value, rest = match.rest;
        if (value.length === tabs * 2) {
          return {
            rest: rest
          };
        }
      }
    };
    eol = regexp(/\n+|$/);
    forward = function(fn) {
      return function(s) {
        return fn()(s);
      };
    };
    collapse = function(_arg) {
      var v, value, _i, _len, _results;
      value = _arg.value;
      _results = [];
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        v = value[_i];
        if (v != null) {
          _results.push(v);
        }
      }
      return _results;
    };
    name = rule(regexp(/^([^:\?\n]+)/), function(_arg) {
      var value;
      value = _arg.value;
      return value.trim();
    });
    atom = rule(regexp(/^([^\n]+)/), function(_arg) {
      var value;
      value = _arg.value;
      return value.trim();
    });
    delimiter = regexp(/^[:\?]/);
    nested = rule(all(bol, name, optional(delimiter), eol, indented(forward((function() {
      return value;
    })))), collapse);
    inline = rule(all(bol, name, delimiter, atom, eol), collapse);
    pair = any(inline, nested);
    array = many(rule(all(bol, atom, eol), function(m) {
      return (collapse(m))[0];
    }));
    object = rule(many(pair), function(_arg) {
      var k, result, v, value, _i, _len, _ref1;
      value = _arg.value;
      result = {};
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        _ref1 = value[_i], k = _ref1[0], v = _ref1[1];
        result[k] = v;
      }
      return result;
    });
    value = any(object, array);
    start = any(value);
    return grammar(start);
  })();

}).call(this);
